version: "3"

x-logging:
  service: &default-logging
    logging:
      options:
        max-size: "10m"
        max-file: "3"

services:
  gitlab:
    <<: *default-logging
    image: gitlab/gitlab-ce:15.11.2-ce.0
    container_name: "gitlab"
    restart: always
    hostname: "${IP_ADDR}"
    ports:
      - "${GITLAB_PORT}:${GITLAB_PORT}"
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://${IP_ADDR}:${GITLAB_PORT}'
        prometheus_monitoring['enable'] = false
        gitlab_rails['initial_root_password'] = '${GITLAB_ROOT_PASSWORD}'
        puma['worker_processes'] = 2
        sidekiq['concurrency'] = 9
        gitlab_rails['gitlab_default_projects_features_container_registry'] = false
    volumes:
      - "gitlab-config:/etc/gitlab"
      - "gitlab-logs:/var/log/gitlab"
      - "gitlab-data:/var/opt/gitlab"
    healthcheck:
      disable: false

  runner:
    <<: *default-logging
    image: gitlab/gitlab-runner:alpine-v15.11.0
    container_name: "gitlab-runner"
    restart: always
    environment:
      - CI_SERVER_URL=http://gitlab:${GITLAB_PORT}/
    volumes:
      - runner-config:/etc/gitlab-runner
      - ${DOCKER_SOCKET}:/var/run/docker.sock
      - ./templates:/templates

  sonarqube-db:
    <<: *default-logging
    image: bitnami/postgresql:15
    container_name: "sonarqube-db"
    restart: always
    volumes:
      - sonarqube-data:/bitnami/postgresql
    environment:
      POSTGRESQL_USERNAME: postgres
      POSTGRESQL_PASSWORD: ${SQ_DB_PASSWORD}
      POSTGRESQL_DATABASE: sonarqube

  sonarqube:
    <<: *default-logging
    image: sonarqube:9.9.1-community
    container_name: "sonarqube"
    restart: always
    depends_on:
      - sonarqube-db
    ports:
      - "${SQ_PORT}:9000"
    environment:
      SONARQUBE_JDBC_USERNAME: postgres
      SONARQUBE_JDBC_PASSWORD: ${SQ_DB_PASSWORD}
      SONARQUBE_JDBC_URL: jdbc:postgresql://sonarqube-db:5432/sonarqube

  redmine-db:
    <<: *default-logging
    image: postgres:12
    container_name: "redmine-db"
    restart: always
    volumes:
      - redmine-db-data:/var/lib/postgresql/data
      - ./redmine.sql:/tmp/redmine.sql
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${REDMINE_DB_PASSWORD}
      POSTGRES_DB: redmine_database

  redmine:
    <<: *default-logging
    image: redmine:5.0.5
    container_name: "redmine"
    restart: always
    depends_on:
      - redmine-db
    ports:
      - "${REDMINE_PORT}:3000"
    volumes:
      - ./redmine-configuration.yml:/usr/src/redmine/config/configuration.yml
      - redmine-files:/usr/src/redmine/files
    environment:
      REDMINE_DB_POSTGRES: redmine-db
      REDMINE_DB_PASSWORD: ${REDMINE_DB_PASSWORD}
      REDMINE_DB_DATABASE: redmine_database
      REDMINE_SECRET_KEY_BASE: ${REDMINE_DB_PASSWORD}

  redis:
    <<: *default-logging
    image: redis:6.2.11
    container_name: "redis"
    restart: always
    ports:
      - "31999:6379"
    volumes:
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  iii-devops-lite-db:
    <<: *default-logging
    image: postgres:12
    container_name: "iii-devops-lite-db"
    restart: always
    ports:
      - "${III_DB_PORT}:5432"
    volumes:
      - iii-devops-lite-db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${III_DB_PASSWORD}
      POSTGRES_DB: postgres
      III_DB: devopsdb

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  iii-devops-lite-api:
    <<: *default-logging
    extends:
      file: docker-compose.iiidevops.yaml
      service: backend-base
    container_name: "iii-devops-lite-api"
    restart: on-failure
    depends_on:
      gitlab:
        condition: service_started
      sonarqube:
        condition: service_started
      redmine:
        condition: service_started
      redis:
        condition: service_started
      iii-devops-lite-db:
        condition: service_healthy
    ports:
      - "${III_PORT}:10009"
    volumes:
      - iii-devops-lite-file:/opt/nfs
      - iii-devops-lite-log:/logs

  iii-devops-lite-api-worker:
    <<: *default-logging
    extends:
      file: docker-compose.iiidevops.yaml
      service: backend-base
    container_name: "iii-devops-lite-api-worker"
    depends_on:
      - redis
      - iii-devops-lite-api
    command: celery -A apis.api:celery worker -P eventlet --loglevel=INFO
  
  iii-devops-lite-api-beat:
    <<: *default-logging
    extends:
      file: docker-compose.iiidevops.yaml
      service: backend-base
    container_name: "iii-devops-lite-api-beat"
    depends_on:
      - redis
      - iii-devops-lite-api
    command: celery -A apis.api.celery beat --loglevel=INFO --schedule=/tmp/celerybeat-schedule

  iii-devops-lite-ui:
    <<: *default-logging
    image: iiiorg/devops-lite-ui:0.0.9
    container_name: "iii-devops-lite-ui"
    restart: always
    labels:
      - "autoheal=true"
    depends_on:
      - iii-devops-lite-api
    ports:
      - "80:80"
    environment:
      API_URL: http://iii-devops-lite-api:10009/
    healthcheck:
      test: curl --fail http://localhost/prod-api/swagger-ui/ || exit 1
      interval: 10s
      timeout: 1s
      retries: 5

volumes:
  gitlab-data:
    driver: local
  gitlab-config:
    driver: local
  gitlab-logs:
    driver: local
  runner-config:
    driver: local

  sonarqube-data:
    driver: local

  redmine-db-data:
    driver: local
  redmine-files:
    driver: local

  iii-devops-lite-db-data:
    driver: local
  iii-devops-lite-file:
    driver: local
  iii-devops-lite-log:
    driver: local
