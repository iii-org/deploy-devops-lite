# THIS FILE IS EXTENDS BY docker-compose.${MODE}.yaml
x-logging:
  service: &default-logging
    logging:
      options:
        max-size: "10m"
        max-file: "3"

services:
  traefik:
    image: "traefik:v2.10"
    restart: always
    command:
      - "--api=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--providers.file.filename=/etc/traefik/dynamic.yaml"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "${DOCKER_SOCKET}:/var/run/docker.sock:ro"
      - "./ca:/ca:ro"
      - "./dynamic.yaml:/etc/traefik/dynamic.yaml:ro"

  api-base:
    image: harbor.dev7.iiidevops.org/devops-fastapi/develop:3d490c5b
    restart: always
    volumes:
      - ${III_ENV}:/usr/src/app/env/.env
      - ${DOCKER_SOCKET}:/var/run/docker.sock
    # We don't share depends_on with other services, because it's docker limit
    environment:
      DATABASE__DATABASE: develop-ce
      DATABASE__PORT: ${III_DB_PORT}
      DATABASE__PASSWORD: ${III_DB_PASSWORD}
      DATABASE__SERVER: ${IP_ADDR}
      DATABASE__USER: postgres
      FORWARDED_ALLOW_IPS: "172.18.0.0/16"
      GITLAB__ADMIN__PASSWORD: ${GITLAB_ROOT_PASSWORD}
      GITLAB__ADMIN__USERNAME: root
      GITLAB__ENABLED: "true"
      GITLAB__INIT_TOKEN: ${GITLAB_INIT_TOKEN}
      GITLAB__URL: ${GITLAB_URL}
      PLUGINS: "true"
      PROJECT__CORS_ORIGINS: '["http://${IP_ADDR}", "http://${IP_ADDR}:10009", "http://localdev.sso.tw:9528", "http://localdev.sso.tw:9529",
        "https://admin.socket.io", "https://devopsui-mono-v3-sso.ingress.dev7.iiidevops.org", "https://devopsui-mono-v3-lite.nyanako.com"]'
      PROJECT__DOMAIN: ${IP_ADDR}
      PROJECT__ENVIRONMENT: development
      PROJECT__INIT__FIRSTNAME: admin
      PROJECT__INIT__LASTNAME: 初始管理者
      PROJECT__INIT__USERNAME: ${III_ADMIN_LOGIN}
      PROJECT__INIT__EMAIL: ${III_ADMIN_EMAIL}
      PROJECT__INIT__PASSWORD: ${III_ADMIN_PASSWORD}
      PROJECT__LOG_LEVEL: DEBUG
      PROJECT__NAME: DevOps API
      PROJECT__SECRET_KEY: ${III_SECRET_KEY}
      PROJECT__SENTRY_DSN: https://c612982c1f917bfc982682d4ba5f8f16@sentry.iiidevops.org/14
      PROJECT__TLS_ENABLED: "true"
      PROJECT__TYPE: SSO
      PROJECT__WEBSOCKET__ADMIN: "true"
      PROJECT__WEBSOCKET__PASSWORD: password
      PROJECT__WEBSOCKET__USERNAME: admin
      REDIS__HOST: ${IP_ADDR}
      REDIS__PASSWORD: ${III_REDIS_PASSWORD}
      REDIS__PORT: "31852"
      SMTP__FROM_EMAIL: ""
      SMTP__FROM_NAME: ""
      SMTP__HOST: ""
      SMTP__PASSWORD: ""
      SMTP__PORT: "587"
      SMTP__RESET_TOKEN_EXPIRE_HOURS: "48"
      SMTP__SSL: "false"
      SMTP__TLS: "true"
      SMTP__USER: ""
      SONARQUBE__TOKEN: ${SONARQUBE_ADMIN_TOKEN}
      SONARQUBE__URL: ${SQ_URL}
      UVICORN_HOST: 127.0.0.1
      UVICORN_PORT: "8000"
      UVICORN_RELOAD: "false"

  gitlab:
    <<: *default-logging
    image: gitlab/gitlab-ce:17.6.2-ce.0
    container_name: "gitlab"
    restart: always
    volumes:
      - "gitlab-config:/etc/gitlab"
      - "gitlab-logs:/var/log/gitlab"
      - "gitlab-data:/var/opt/gitlab"
    healthcheck:
      disable: false

  runner:
    <<: *default-logging
    image: gitlab/gitlab-runner:alpine-v17.6.0
    container_name: "gitlab-runner"
    restart: always
    volumes:
      - runner-config:/etc/gitlab-runner
      - ${DOCKER_SOCKET}:/var/run/docker.sock
      - ${TEMPLATES_DIR}:/templates

  sonarqube-db:
    <<: *default-logging
    image: bitnami/postgresql:15
    container_name: "sonarqube-db"
    restart: always
    volumes:
      - sonarqube-data:/bitnami/postgresql
    environment:
      POSTGRESQL_USERNAME: postgres
      POSTGRESQL_PASSWORD: ${SQ_DB_PASSWORD}
      POSTGRESQL_DATABASE: sonarqube

  sonarqube:
    <<: *default-logging
    image: sonarqube:9.9.6-community
    container_name: "sonarqube"
    restart: always
    ports:
      - "${SQ_PORT}:9000"
    environment:
      SONARQUBE_JDBC_USERNAME: postgres
      SONARQUBE_JDBC_PASSWORD: ${SQ_DB_PASSWORD}
      SONARQUBE_JDBC_URL: jdbc:postgresql://sonarqube-db:5432/sonarqube

  # redmine-db:
  #   <<: *default-logging
  #   image: postgres:12
  #   container_name: "redmine-db"
  #   restart: always
  #   volumes:
  #     - redmine-db-data:/var/lib/postgresql/data
  #     - ${REDMINE_SQL}:/tmp/redmine.sql
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: ${REDMINE_DB_PASSWORD}
  #     POSTGRES_DB: redmine_database

  # redmine:
  #   <<: *default-logging
  #   image: redmine:4.2.10
  #   container_name: "redmine"
  #   restart: always
  #   ports:
  #     - "${REDMINE_PORT}:3000"
  #   volumes:
  #     - ${REDMINE_CONF}:/usr/src/redmine/config/configuration.yml
  #     - redmine-files:/usr/src/redmine/files
  #   environment:
  #     REDMINE_DB_POSTGRES: redmine-db
  #     REDMINE_DB_PASSWORD: ${REDMINE_DB_PASSWORD}
  #     REDMINE_DB_DATABASE: redmine_database
  #     REDMINE_SECRET_KEY_BASE: ${REDMINE_DB_PASSWORD}

  redis:
    <<: *default-logging
    image: redis:7.4.0
    container_name: "redis"
    restart: always
    ports:
      - "31852:6379"
    volumes:
      - ${REDIS_CONF}:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  minio:
    <<: *default-logging
    image: minio/minio:RELEASE.2024-12-18T13-15-44Z
    container_name: "minio"
    restart: always
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    command: server --console-address ":9001" /data

  iii-devops-lite-db:
    <<: *default-logging
    image: postgres:15
    container_name: "iii-devops-lite-db"
    restart: always
    ports:
      - "${III_DB_PORT}:5432"
    volumes:
      - iii-devops-lite-db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${III_DB_PASSWORD}
      POSTGRES_DB: develop-ce

    healthcheck:
      test: [ "CMD-SHELL", "bash -c 'pg_isready -U $$POSTGRES_USER'" ]
      interval: 10s
      timeout: 5s
      retries: 5

  iii-devops-lite-api:
    <<: *default-logging
    extends:
      service: api-base
    container_name: "iii-devops-lite-api"
    restart: on-failure
    ports:
      - "${III_PORT}:8080"
    volumes:
      - ${III_ENV}:/usr/src/app/env/.env
      - ${DOCKER_SOCKET}:/var/run/docker.sock
      - iii-devops-lite-log:/logs

  iii-devops-lite-ui:
    <<: *default-logging
    image: harbor.dev7.iiidevops.org/devopsui-mono/v3:312e193b-lite
    container_name: "iii-devops-lite-ui"
    restart: always
    environment:
      API_URL: http://iii-devops-lite-api:8080/
      API_WS_URL: http://iii-devops-lite-api:8080/
      CE_CUSTOM_TITLE: "III CUSTOM DevSecOps Community"
    healthcheck:
      test: curl --fail http://localhost/prod-api/docs || exit 1
      interval: 10s
      timeout: 1s
      retries: 5
